---
- name: Include variables
  include_vars: proxmox_vars.yml

- name: Reboot the host
  block:
      - name: Check if reboot is required
        ansible.builtin.stat:
          path: /var/run/reboot-required
        register: reboot_required_file

      - name: Reboot the new host
        reboot:
          reboot_timeout: 300
          msg: "Rebooting incase of pending updates"
          post_reboot_delay: 30
          test_command: uptime

      - name: Wait for the host 
        wait_for_connection:
          delay: 10
          timeout: 300
          sleep: 5
  when: reboot_required_file.exists
  become: true
  rescue:   
    - name: Notify if the reboot failed
      debug:
        msg: "Server failed to reboot, or did not come back up in time"
      
- name: Remove bootstrap tags
  block:
    - name: Include API auth
      include_role:
        name: proxmox
        tasks_from: api_auth.yml
    
    - name: Get VM info
      uri:
        url: "{{ proxmox_cluster_url }}/api2/json/nodes/{{ proxmox_node }}/qemu/{{ proxmox_vmid }}/config"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_ticket.json.data.ticket }}"
          CSRFPreventionToken: "{{ proxmox_ticket.json.data.CSRFPreventionToken }}"
        validate_certs: true
        return_content: yes
      register: vm_info

    - name: DEBUG | Show vm info
      debug:
        msg: "{{ vm_info }}"

    - name: Remove bootstrap tag and update VM
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        name: "{{ proxmox_name }}"
        tags: "{{ vm_info.results.tags.split(';') | reject('equalto', 'bootstrap') | join(';') }}"
        update: true
      delegate_to: localhost