---
- name: Get network info
  ansible.builtin.docker_network_info:
    name: "{{ docker_network }}"
  register: network_info

# - name: DEBUG - list network_info
#   ansible.builtin.debug:
#     msg: "{{ network_info }}"

- name: Gather information about all Docker containers
  community.docker.docker_container_info:
    name: "{{ item }}"
  loop: "{{ network_info.network.Containers.keys() }}"
  register: docker_info

- name: DEBUG - list container images
  ansible.builtin.debug:
    msg: "{{ item.container.Image | selectattr('State.Status', 'equalto', 'running') }}"
  loop: "{{ docker_info.results }}"
  loop_control:
    label: "{{ item.container.Config.Image }}"
  ignore_errors: yes

- name: Create dictionary of container config images and their current SHAs
  set_fact:
    container_images_shas: >-
      {{ prepull_images_shas | default({}) | combine({item.container.Config.Image: item.container.Image}) }}
  loop: "{{ docker_info.results }}"
  when: docker_info.results | length > 0

- name: DEBUG - list container_images_shas
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ container_images_shas }}"

- name: Pull the latest version of images for running containers
  community.docker.docker_image:
    name: "{{ item.container.Config.Image }}"
    source: pull
  loop: "{{ docker_info.containers }}"
  when: docker_info.containers | length > 0

# - name: Gather new image SHAs for running containers
#   community.docker.docker_image_info:
#     name: "{{ item.Image }}"
#   register: after_pull_images
#   loop: "{{ docker_info.containers | selectattr('State.Status', 'equalto', 'running') }}"
#   when: docker_info.containers | length > 0

# - name: Compare SHAs of images before and after pulling
#   ansible.builtin.debug:
#     msg: "Image {{ item.0.Image }} changed: {{ item.1.Id != item.2.Id }}"
#   loop: "{{ before_pull_images.results | zip(docker_info.containers | selectattr('State.Status', 'equalto', 'running') | list, after_pull_images.results) }}"
#   when: docker_info.containers | length > 0
  
# - name: Restart containers if the image SHA has changed
#   community.docker.docker_container:
#     name: "{{ item.1.Names[0] }}"
#     state: restarted
#   loop: "{{ before_pull_images.results | zip(docker_info.containers | selectattr('State.Status', 'equalto', 'running') | list, after_pull_images.results) }}"
#   when: 
#     - docker_info.containers | length > 0
#     - item.0.Id != item.2.Id
#   loop_control:
#     label: "{{ item.1.Names[0] }}"