---
- name: Wait for apt lock to be released
  ansible.builtin.shell: |
    timeout=120  # Increased timeout to provide more time for locks to be released
    end=$((SECONDS+timeout))
    while fuser /var/lib/apt/lists/lock /var/lib/dpkg/lock /var/cache/apt/archives/lock >/dev/null 2>&1; do
      if [ $SECONDS -ge $end ]; then
        echo "Timeout waiting for apt lock"
        exit 1
      fi
      echo "Waiting for other software managers to finish..."
      sleep 1
    done
  register: wait_for_lock
  failed_when: wait_for_lock.rc != 0
  changed_when: false
  become: yes

- name: Update package cache
  ansible.builtin.shell: apt-get update
  become: yes
  register: update_cache

- name: List upgradable packages
  ansible.builtin.shell: apt list --upgradable
  register: upgradable_packages

- name: Print names of packages to be upgraded
  ansible.builtin.debug:
    msg: "{{ upgradable_packages.stdout_lines }}"

- name: Update all packages
  ansible.builtin.shell: apt-get upgrade -y
  environment:
    DEBIAN_FRONTEND: noninteractive
  become: yes
  register: upgrade_results
  until: upgrade_results is succeeded
  retries: 10
  delay: 10

- name: DEBUG - list upgrade_results
  ansible.builtin.debug:
    msg: "{{ upgrade_results }}"

- name: Check if reboot is required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Notify reboot is required
  ansible.builtin.debug:
    msg: "Reboot is required for the system to apply all updates."
  when: reboot_required_file.stat.exists